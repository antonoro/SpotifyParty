{"version":3,"sources":["topheader/img/logoW.svg","img/vynil.svg","img/record.svg","hash.js","topheader/topheader.js","dashboard/mygroups/mygroups.js","dashboard/chat/chat.js","dashboard/nextup/nextup.js","dashboard/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","TopHeader","props","state","user","userid","devicename","deviceactive","this","console","log","fetch","then","res","json","setState","getID","Navbar","className","expand","Brand","href","alt","src","logo","Toggle","bg","aria-controls","Collapse","id","Nav","Link","NavDropdown","alignRight","title","Item","Divider","React","Component","MyGroups","handleSelectedPlaylist","val","name","getplaylist","handleInputChange","event","target","value","handleAddPlaylistSubmit","preventDefault","newPlaylist","method","body","JSON","stringify","newplaylist","relatedgroup","newPlaylistGroup","headers","resp","getgroups","handleAddGroupSubmit","newGroup","newArchivegroup","newgroup","userID","group","handleAddMemberSubmit","newMember","newMemberGroup","loggedIn","groups","selectedGroup","updatedPlaylist","playlistToMyGroups","map","element","i","playlists","length","groupname","playlist","index","tracklist","newgroups","getAllgroups","Accordion","defaultActiveKey","Card","as","Header","eventKey","Body","members","member","Button","onSubmit","Form","role","Group","Control","type","onChange","placeholder","variant","ToggleButtonGroup","vertical","ToggleButton","Chat","useState","setGroup","author","setAuthor","messageCollection","setMessages","setErr","useEffect","chatSocket","WebSocket","onopen","onmessage","msg","parse","data","messages","setupWS","success","catch","err","message","writtenmessage","class","required","Nextup","getTrackInfos","tracks","track","artists","album","Math","floor","duration_ms","toFixed","uri","searchSubmit","searchedTrack","items","foundTracks","addSongtoMongo","song","uriTrack","playlistname","getUpdatedPlaylist","nextup","urilist","style","Table","striped","border","div","onClick","bind","Dashboard","getMusicInfo","undefined","refreshToggled","playback","is_playing","playpausePlayback","action","playbackCommandtrigger","playSong","songuri","deviceID","iteratorPlaylist","playlistDisplay","setTimeout","changePlaybackTriggerNext","changePlaybackTriggerPrevious","changePlaybackNext","alert","changePlaybackPrevious","getSelectedPlaylist","getSelectedGroup","addedSongtoPlaylist","playListCommandtrigger","changePlayback","getGroup","disabled","images","url","App","loggedin","userState","getUserToggled","statusCode","displayname","deviceid","Vynil","Record","x2","y1","y2","points","cx","cy","r","transform","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.a0f2dc57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logoW.a156b25d.svg\";","module.exports = __webpack_public_path__ + \"static/media/vynil.2840d63a.svg\";","module.exports = __webpack_public_path__ + \"static/media/record.b3d8db83.svg\";","const hash = window.location.hash\r\n    .substring(1)\r\n    .split(\"&\")\r\n    .reduce(function(initial, item) {\r\n        if (item) {\r\n        var parts = item.split(\"=\");\r\n        initial[parts[0]] = decodeURIComponent(parts[1]);\r\n        }\r\n        return initial;\r\n    }, {});\r\nwindow.location.hash = \"\";\r\n\r\nexport default hash;","import React from 'react';\r\nimport { Navbar, Button, Form, FormControl, NavDropdown, Nav } from 'react-bootstrap';\r\nimport './topheader.css';\r\nimport hash from \"../hash\";\r\nimport * as $ from \"jquery\";\r\nimport logo from './img/logoW.svg'\r\n\r\n\r\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\r\n\r\nconst client_id = process.env.REACT_APP_CLIENT_ID;\r\nconst redirect_uri = process.env.REACT_APP_REDIRECT_URI;\r\n\r\nconst scopes = [\r\n  \"user-read-currently-playing\",\r\n  \"user-read-playback-state\",\r\n  \"user-modify-playback-state\",\r\n  \"user-read-email\",\r\n];\r\n\r\n\r\nclass TopHeader extends React.Component{\r\n    \r\n    constructor(props){\r\n        super();\r\n        \r\n        this.state = {\r\n            user: '',\r\n            userid: null,\r\n            devicename: null, \r\n            deviceactive: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.state.userid === null)\r\n        {\r\n            console.log(\"Requesting client id...\");\r\n            fetch(\"/authorize\")\r\n            .then(res => res.json()\r\n            .then(res => {\r\n                console.log(\"Fetched client ID:\", res.userid);\r\n                this.setState({userid: res.userid});\r\n                console.log(\"client id:\", this.state.userid);\r\n                this.props.getID(res.userid);\r\n            }));\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        if(this.props.user !== this.state.user)\r\n        {this.setState({user: this.props.user});}\r\n\r\n        if(this.state.devicename !== this.props.devicename && this.props.devicename !== null)\r\n        {\r\n            this.setState({devicename: this.props.devicename, deviceactive: `${this.props.deviceactive}`})\r\n        }\r\n        \r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            \r\n            <Navbar  className=\"topheader\"  expand=\"lg\">\r\n                <Navbar.Brand className=\"brandLogo\" href=\"/\"><img className=\"logo\" alt=\"logo\" src={logo}/></Navbar.Brand>\r\n                <Navbar.Toggle bg=\"light\" aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse bg=\"light\" id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                    </Nav>\r\n                    { (this.state.user === '') ?\r\n                    <Nav className=\"ml-auto logintag\">\r\n                        <Nav.Link  className=\"topheader unique white\" href={`/login/${this.state.userid}`}>Login with Spotify</Nav.Link>\r\n                    </Nav>\r\n                    :\r\n                    <Nav bg=\"light\" className=\"ml-auto\">\r\n                        <NavDropdown alignRight className=\"myaccountTag\" title=\"My Account\" id=\"dropdown-menu-align-right\">\r\n\r\n                            <NavDropdown.Item className=\"white\">Hello, {this.state.user}</NavDropdown.Item>\r\n\r\n                            <NavDropdown.Item className=\"white\">Device name: {this.state.devicename}</NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item className=\"white\" href=\"/\">Log out</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                    } \r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default TopHeader;","import React from 'react';\r\nimport './mygroups.css';\r\nimport {Accordion, Card, ToggleButtonGroup, ToggleButton, Form, Button, Collapse} from 'react-bootstrap';\r\n\r\nclass MyGroups extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            user: '',\r\n            userID: null,\r\n            loggedIn: false,\r\n            getgroups: false,\r\n            groups: null,\r\n            newPlaylist: '',\r\n            newPlaylistGroup: '',\r\n            newGroup: '',\r\n            newMember: '',\r\n            newMemberGroup: '',\r\n            selectedGroup: null,\r\n            updatedPlaylist: null,\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(this.props.user !== this.state.user && this.props.user !== '' && this.state.userID !== this.props.userid) // when user changes\r\n        {\r\n            this.setState({user: this.props.user, loggedIn: true, getgroups: true, userID: this.props.userid});\r\n            \r\n        }\r\n\r\n        if(this.state.selectedGroup !== this.props.selectedGroup)\r\n        {\r\n            this.setState({selectedGroup: this.props.selectedGroup});\r\n        }\r\n\r\n        if(this.state.groups !== null && this.state.selectedGroup !== null && this.props.playlistToMyGroups !== this.state.updatedPlaylist)\r\n        {\r\n            var groups = this.state.groups;\r\n            groups.map((element, i) => {\r\n                if(element.playlists.length && element.groupname === this.state.selectedGroup)\r\n                {\r\n                    var playlists = element.playlists;\r\n                    playlists.map((playlist, index) => {\r\n                        if(playlist.name === this.props.playlistToMyGroups.name)\r\n                        {\r\n                            console.log(\"Old tracklist:\", playlist.tracklist);\r\n                            console.log(\"to update with:\", this.props.playlistToMyGroups.tracklist);\r\n                            if(playlist.tracklist !== this.props.playlistToMyGroups.tracklist)\r\n                            {\r\n                                \r\n                                var newgroups = groups;\r\n                                newgroups[i].playlists[index].tracklist = this.props.playlistToMyGroups.tracklist;\r\n                                this.setState({groups: newgroups, updatedPlaylist: this.props.playlistToMyGroups});\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }    \r\n\r\n        if(this.state.loggedIn === true && this.state.getgroups === true)\r\n        {\r\n            this.getAllgroups();\r\n        }\r\n    }\r\n\r\n    getAllgroups() {\r\n        fetch(\"/getallgroups\", {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({userid: this.state.userID}),\r\n        })\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"Res is: \", res);\r\n            this.setState({groups: res, getgroups: false})\r\n            \r\n        }));\r\n    }\r\n\r\n    handleSelectedPlaylist = (val) => {\r\n        console.log(\"Selected playlist in MyGroups: \", `${val[0].name} from group: ${val[1]}`);\r\n        this.props.getplaylist(val[0], val[1]);\r\n        //this.props.getGroup(val[1]);\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: [event.target.value], \r\n        })\r\n    }\r\n\r\n    handleAddPlaylistSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.newPlaylist.value !== '')\r\n        {\r\n            fetch('/createplaylist', \r\n            {\r\n                method: 'POST', \r\n                body: JSON.stringify({newplaylist: `${this.state.newPlaylist}`, relatedgroup: `${event.target.newPlaylistGroup.value}`}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                console.log(\"addplaylist response:\", resp);\r\n                if(resp !== null)\r\n                {\r\n                    this.setState({newPlaylist: '', newPlaylistGroup: '', getgroups: true});\r\n                    console.log(this.state.newPlaylist);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleAddGroupSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.newGroup.value !== '')\r\n        {\r\n            var newArchivegroup = this.state.newGroup;\r\n            fetch('/creategroup', \r\n            {\r\n                method: 'POST', \r\n                body: JSON.stringify({newgroup: `${this.state.newGroup}`, userid: this.state.userID}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                if(resp !== null)\r\n                {\r\n                    this.setState({newGroup: '', getgroups: true});\r\n                    fetch('/creategroupmessages', \r\n                    {\r\n                        method: 'POST', \r\n                        body: JSON.stringify({group: `${newArchivegroup}`}),\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                    }).then(res => res.json())\r\n                    .then(resp => {\r\n                        if(resp !== null)\r\n                        {\r\n                            console.log(\"Group chatarchive created\");\r\n                        }\r\n                    })\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleAddMemberSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.newMember.value !== '')\r\n        {\r\n            fetch('/addmember', \r\n            {\r\n                method: 'POST', \r\n                body: JSON.stringify({newMember: `${this.state.newMember}`, relatedgroup: `${event.target.newMemberGroup.value}`}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                if(resp !== null)\r\n                {\r\n                    this.setState({newMember: '', newMemberGroup: '', getgroups: true});\r\n                    \r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"fullsize\">\r\n                { this.state.user !== null ?\r\n                    <div className=\"fullsize\">\r\n\r\n                        { this.state.groups !== null ?\r\n                            <Accordion defaultActiveKey=\"0\">\r\n                                {   this.state.groups.map((group, index) =>\r\n                                    {\r\n                                        return (\r\n                                        <Card>\r\n                                            <Accordion.Toggle as={Card.Header} eventKey={index}>\r\n                                                {group.groupname}\r\n                                            </Accordion.Toggle>\r\n                                            <Accordion.Collapse eventKey={index}>\r\n                                                <Card.Body>\r\n                                                    <h4>Members</h4>\r\n                                                    <ul>\r\n                                                        {group.members.map((member, i) => {\r\n                                                            return(<h6>{member}</h6>)\r\n                                                            })\r\n                                                        }\r\n                                                    </ul>\r\n                                                    <Accordion>\r\n                                                        <Accordion.Toggle as={Button} eventKey={3}>\r\n                                                            Add Member\r\n                                                        </Accordion.Toggle>\r\n                                                       \r\n                                                        <Accordion.Collapse eventKey={3}>\r\n                                                            <Card.Body>\r\n                                                                <form onSubmit={this.handleAddMemberSubmit}>\r\n                                                                    <Form role=\"form\">\r\n                                                                        <Form.Group>\r\n                                                                            <Form.Control name=\"newMemberGroup\" type=\"hidden\" value={this.state.groups[index].groupname}/>\r\n                                                                            <Form.Control onChange={this.handleInputChange} name=\"newMember\" type=\"email\" placeholder=\"Enter email\" value={this.state.newMember}/>\r\n                                                                            \r\n                                                                            <Button className=\"btnAddPlaylist\" variant=\"success\" type=\"submit\">\r\n                                                                                Add\r\n                                                                            </Button>\r\n                                                                        </Form.Group>\r\n                                                                    </Form>\r\n                                                                </form>\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </Accordion>\r\n                                                    <h4 className=\"labelPlaylist\">Playlists</h4>\r\n                                                    <div id=\"fixedspacing\">\r\n                                                        <p></p>\r\n                                                    </div>\r\n                                                    <ToggleButtonGroup type=\"radio\" name=\"playlists\" vertical onChange={this.handleSelectedPlaylist}>\r\n                                                        {group.playlists.map((playlist, i) => {\r\n                                                            return(\r\n            \r\n                                                                <ToggleButton value={[this.state.groups[index].playlists[i],this.state.groups[index].groupname]} >{playlist.name}</ToggleButton>\r\n                                                                \r\n                                                            )\r\n                                                        })\r\n                                                        }\r\n                                                    </ToggleButtonGroup>\r\n                                                    <div id=\"fixedspacing\">\r\n                                                        <p></p>\r\n                                                    </div>\r\n                                                    <Accordion>\r\n                                                        <Accordion.Toggle as={Button} eventKey={2}>\r\n                                                            Create Playlist\r\n                                                        </Accordion.Toggle>\r\n                                                       \r\n                                                        <Accordion.Collapse eventKey={2}>\r\n                                                            <Card.Body>\r\n                                                                <form onSubmit={this.handleAddPlaylistSubmit}>\r\n                                                                    <Form role=\"form\">\r\n                                                                        <Form.Group>\r\n                                                                            <Form.Control name=\"newPlaylistGroup\" type=\"hidden\" value={this.state.groups[index].groupname}/>\r\n                                                                            <Form.Control onChange={this.handleInputChange} name=\"newPlaylist\" type=\"text\" placeholder=\"Enter name\" value={this.state.newPlaylist}/>\r\n                                                                            \r\n                                                                            <Button className=\"btnAddPlaylist\" variant=\"success\" type=\"submit\">\r\n                                                                                Create\r\n                                                                            </Button>\r\n                                                                        </Form.Group>\r\n                                                                    </Form>\r\n                                                                </form>\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </Accordion>\r\n                                              </Card.Body>\r\n                                            </Accordion.Collapse>\r\n                                        </Card>\r\n                                        \r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Accordion> \r\n                        :\r\n                            <div>\r\n                                \r\n                            </div>\r\n                        }\r\n\r\n                        <Accordion>\r\n                            <Accordion.Toggle as={Card.Header} eventKey={1}>\r\n                                Create Group\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey={1}>\r\n                                <Card.Body>\r\n                                    <form onSubmit={this.handleAddGroupSubmit}>\r\n                                        <Form>\r\n                                            <Form.Group>\r\n                                            <Form.Control className=\"input\" onChange={this.handleInputChange} name=\"newGroup\" type=\"text\" placeholder=\"Enter name\" value={this.state.newGroup}/>\r\n                                            </Form.Group>\r\n                                            <Button className=\"btnAddPlaylist\" variant=\"success\" type=\"submit\">\r\n                                                Create\r\n                                            </Button>\r\n                                        </Form>\r\n                                    </form>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Accordion>\r\n                            \r\n                    </div>\r\n                    :\r\n                    <h4>Not logged in</h4>\r\n                }\r\n                    \r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MyGroups;","import React, { useState, useEffect } from 'react';\r\n\r\nimport './chat.css';\r\n\r\nfunction Chat(props) {\r\n\r\n    const [selectedGroup, setGroup] = useState( null );\r\n    const [author, setAuthor] = useState( '' );\r\n    const [messageCollection, setMessages] = useState([]);\r\n   \r\n    const [err, setErr] = useState(null); \r\n    \r\n    const setupWS = (group) => {\r\n        var chatSocket = new WebSocket(\"ws://thespotifyparty.herokuapp.com:3001\");\r\n\r\n        chatSocket.onopen = () => {\r\n            console.log(\"WS client connected\");\r\n\r\n            chatSocket.onmessage = (msg) => {\r\n                console.log(\"WS client set message:\", JSON.parse(msg.data));\r\n                var updatedMessages = JSON.parse(msg.data);\r\n                updatedMessages.map((group, index) => {\r\n                    if(group.groupname === props.group)\r\n                    {\r\n                        setMessages(group.messages);\r\n                    }\r\n                })\r\n                \r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(props.group !== '')\r\n        {\r\n            setupWS(props.group);\r\n            setAuthor(props.author);\r\n            setGroup(props.group);\r\n            setMessages([]);\r\n        }\r\n    }, [props.group]);\r\n\r\n    useEffect(() => {\r\n        fetch(\"/allgroupmessages\", {\r\n            method:'POST', \r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({group: props.group}), \r\n        })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n            if(!res.success)\r\n            {\r\n                console.log(\"No group registered\");\r\n                return;\r\n            }\r\n            else{\r\n            console.log(\"Setting messageCollection\", res.data.messages);\r\n            setMessages(res.data.messages);\r\n            }\r\n        })\r\n        .catch((err) => setErr(err));\r\n    }, [selectedGroup]);\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n        \r\n        var group = event.target[0].value;\r\n        var author = event.target[1].value;\r\n        var writtenmessage = event.target[2].value;\r\n\r\n        fetch(\"/sendchatmessage\", \r\n        {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({group: group, author: author, writtenmessage: writtenmessage}),\r\n        }).then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"Done.\", res);\r\n        }));\r\n    }\r\n\r\n    return(\r\n        <div className=\"chat\">\r\n            { props.group === \"\" ? \r\n            <div>\r\n                <h2>Group chat</h2>\r\n                <h2>[No group selected]</h2>\r\n            </div>\r\n            :\r\n            <div>\r\n                <h2>Group chat: {selectedGroup}</h2>\r\n                <div id=\"chatbox\" className=\"row justify-content-center p-3\">    \r\n                    <table className=\"tablechat\">\r\n                        <thead>\r\n                            <th className=\"user\"></th>\r\n                            <th className=\"message\"></th>\r\n                        </thead>\r\n                    \r\n                        <tbody>\r\n                        {messageCollection.map((message, index) => \r\n                            {\r\n                            return(\r\n                                <tr>\r\n                                    <td className=\"user\">{message[1]} said: </td>\r\n                                    <td className=\"message\">{message[0]}</td>\r\n                                </tr>\r\n                            )\r\n                            }\r\n                        )\r\n                        }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <form onSubmit={sendMessage} class=\"form-inline justify-content-left p-3\">\r\n                        <div class=\"form-group mb-2\">\r\n                        <input className=\"form-control\" name=\"group\" value={selectedGroup} type=\"hidden\"/>\r\n                        <input className=\"form-control\" name=\"author\" value={author} type=\"hidden\"/>\r\n                            <input className=\"form-control\" name=\"writtenMessage\" type=\"text\" placeholder=\"Write a message...\" required/>\r\n                        </div>\r\n                        <button className=\"btn btn-success mb-2\" type=\"submit\">Send</button>\r\n                    </form>\r\n                </div>    \r\n            </div>\r\n            }\r\n            \r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Chat;","import React, { useLayoutEffect } from 'react';\r\nimport './nextup.css';\r\nimport {Table} from 'react-bootstrap';\r\n\r\nclass Nextup extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            group: '',\r\n            userID: null,\r\n            playlist: null,\r\n            playlistname: null,\r\n            tracklist: [[\"\", \"\"]],\r\n            nextup: 0,\r\n            searchedTrack: '',\r\n            foundTracks: [],\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        \r\n        if(this.state.playlist !== this.props.playlist && this.props.playlist !== null && this.props.groups !== this.state.group)\r\n        { \r\n            var urilist = [];\r\n            this.props.playlist.tracklist.map((element,i) => {\r\n                return  urilist[i] = element;\r\n            });\r\n            this.setState({playlist: this.props.playlist, playlistname: this.props.playlist.name, group: this.props.group});\r\n            if(urilist.length > 0)\r\n            {\r\n                this.getTrackInfos(urilist);\r\n            }\r\n            else{\r\n                this.setState({tracklist: [[\"\", \"\"]]});\r\n            }\r\n        }\r\n\r\n        if(this.props.user !== '' && this.state.userID !== this.props.userid)\r\n        {\r\n            this.setState({userID: this.props.userid});\r\n        }\r\n\r\n        if(this.state.nextup !== this.props.nextup)\r\n        {\r\n            if(this.props.nextup < this.state.tracklist.length)\r\n            {\r\n                this.setState({nextup: this.props.nextup});\r\n            }\r\n\r\n            if(this.state.tracklist.length === 0)\r\n            {\r\n                this.setState({nextup: 0});\r\n            }\r\n            \r\n        }\r\n\r\n    \r\n    }\r\n\r\n    getTrackInfos = (tracklist) => {\r\n        fetch(\"/gettracksinfo\", \r\n        {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({tracks: tracklist, userid: this.state.userID}),\r\n        }).then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"Fetched tracks info:\", res);\r\n            var tracks = [];\r\n            res.map((track, i) => {\r\n                return tracks[i] = [track.name, track.artists[0].name, track.album.name, `${(Math.floor(track.duration_ms/60000)).toFixed(0)}:${((track.duration_ms/1000)%60).toFixed(0)}`, track.uri];\r\n            });\r\n            console.log(\"Tracks:\", tracks);\r\n            this.setState({tracklist: tracks});\r\n        }));\r\n        \r\n    } \r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: [event.target.value], \r\n        })\r\n    }\r\n\r\n    searchSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.searchedTrack.value !== '')\r\n        {\r\n            fetch('/searchtracks', {\r\n                method:'POST',\r\n                body: JSON.stringify({searchedTrack: `${this.state.searchedTrack}`, userid: this.state.userID}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                if(resp !== null)\r\n                {\r\n                    console.log(\"Returned tracks:\", resp.items);\r\n                    var tracks = [];\r\n                    resp.items.map((track, index) => {\r\n                        return tracks[index] = [track.name, track.artists[0].name, track.album.name, track.uri];\r\n                    })\r\n                    this.setState({foundTracks: tracks, searchedTrack: ''});\r\n                    console.log(\"tracks: \", this.state.foundTracks);\r\n                }\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    addSongtoMongo = (song) => {\r\n        console.log(song.target.value);\r\n        var uri = song.target.value.split(':');\r\n        fetch(\"/addtracktoplaylist\", {\r\n            method:'POST',\r\n            body: JSON.stringify({uriTrack: `${uri[2]}`,playlist: `${this.state.playlistname}`, group: `${this.state.group}`, userid: this.state.userID}),\r\n            headers: { 'Content-Type': 'application/json' },\r\n        }).then(res => res.json())\r\n        .then(resp => {\r\n            console.log(\"Playlists\", resp);\r\n            this.setState({foundTracks: []});\r\n            this.props.getUpdatedPlaylist(resp, this.state.group);\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"row nextupAddsong\" style={{}}>\r\n                <div className=\"col-6\">\r\n                { this.state.playlist !== null ?\r\n                    <div className=\"nextup\">\r\n                        <h3 className=\"bigF\">Next up: {this.state.tracklist[this.state.nextup][0]} - {this.state.tracklist[this.state.nextup][1]}</h3>\r\n                        <label>Playlist name: {this.state.playlistname} Group: {this.state.group}</label>\r\n                        <Table striped border>\r\n                            <thead className=\"nextup\">\r\n                                <th>#</th>\r\n                                <th>Song</th>\r\n                                <th>Artist</th>\r\n                                <th>Album</th>\r\n                                <th>Duration</th>\r\n                            </thead>\r\n                            <tbody>\r\n                            {this.state.tracklist.map((element, index) => {\r\n                                return(<tr className=\"nextup\">\r\n                                    <td>{index+1}</td>\r\n                                    <td>{element[0]}</td>\r\n                                    <td>{element[1]}</td>\r\n                                    <td>{element[2]}</td>\r\n                                    <td>{element[3]}</td>\r\n                                </tr>)\r\n                            })\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                        \r\n                    </div>\r\n                :\r\n                    <h2 className=\"nextup\">[No playlist selected]</h2>\r\n                }\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <h2 div className=\"nextup\">Add song to playlist</h2>\r\n                    { this.state.playlist !== null ?\r\n                    <div>\r\n                        <form class=\"form-inline justify-content-center\" onSubmit={this.searchSubmit}>\r\n                            <div class=\"form-group mb-2 \">\r\n                                <input onChange={this.handleInputChange} className=\"form-control\" name=\"searchedTrack\" value={this.state.searchedTrack} type=\"text\" placeholder=\"Search song...\"/>\r\n                            </div>\r\n                            <button className=\"btn btn-success mb-2\" type=\"submit\">Search</button>\r\n                        </form>\r\n                        <Table striped border className=\"nextup\">\r\n                            <thead >\r\n                                <th>Song</th>\r\n                                <th>Artist</th>\r\n                                <th>Album</th>\r\n                                <th>Select</th>\r\n                            </thead>\r\n                            { this.state.foundTracks.length > 0 ?\r\n                                <tbody>\r\n                                {this.state.foundTracks.map((element, index) => {\r\n                                    return(\r\n                                        <tr>\r\n                                            <td>{element[0]}</td>\r\n                                            <td>{element[1]}</td>\r\n                                            <td>{element[2]}</td>\r\n                                            <td>\r\n                                                <button onClick={this.addSongtoMongo.bind(this)} value={element[3]} className=\"btn btn-success\">Add</button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                                }   \r\n                                </tbody>\r\n                                :\r\n                                <tbody>\r\n\r\n                                </tbody>\r\n                            }\r\n                            \r\n                        </Table>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                    </div>\r\n                    }\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Nextup;","import React from 'react';\r\nimport MyGroups from './mygroups/mygroups.js';\r\nimport Chat from './chat/chat.js'\r\nimport Nextup from './nextup/nextup.js';\r\nimport './dashboard.css'\r\n\r\nclass Dashboard extends React.Component{\r\n    \r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            user: '',\r\n            deviceID: null,\r\n            userID: null,\r\n            loggedIn: false,\r\n            item: null,\r\n            refreshToggled: false,\r\n            playbackCommandtrigger: false,\r\n            playListCommandtrigger: false,\r\n            changePlaybackTriggerNext: false,\r\n            changePlaybackTriggerPrevious: false,\r\n            changePlayback: null,\r\n            playback: null,\r\n            playlistDisplay: null,\r\n            playlistToMyGroups: null,\r\n            iteratorPlaylist:0,\r\n            group: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    componentDidUpdate(){\r\n\r\n        if(this.state.userID !== null && this.props.user !== this.state.user && this.props.user !== '' && this.props.deviceID !== this.state.deviceID && this.props.deviceID !== null) // when user changes\r\n        {\r\n            this.setState({user: this.props.user, loggedIn: true, deviceID: this.props.deviceID});\r\n            this.getMusicInfo();\r\n        }\r\n\r\n        if(this.props.userid !== null && this.props.userid !== this.state.userID)\r\n        {\r\n            this.setState({userID: this.props.userid});\r\n        }\r\n\r\n        if(this.state.refreshToggled)\r\n        {\r\n            console.log('Refreshed');\r\n            this.getMusicInfo();\r\n        }\r\n\r\n        if(this.state.playbackCommandtrigger)\r\n        {\r\n            console.log('Triggered Play/pause');\r\n            if(this.state.playback === true)\r\n            {\r\n                console.log('play');\r\n                this.playpausePlayback(\"play\");\r\n            }\r\n            else\r\n            {\r\n                console.log('pause');\r\n                this.playpausePlayback(\"pause\");\r\n            } \r\n        }\r\n\r\n        if(this.state.changePlaybackTriggerNext)\r\n        {\r\n            \r\n            var i = this.state.iteratorPlaylist;\r\n            console.log(\"size:\", this.state.playlistDisplay.tracklist.length);\r\n            console.log(\"iterator: \", i);\r\n            console.log('next song: ',this.state.playlistDisplay.tracklist[i]);\r\n            \r\n            this.playSong(this.state.playlistDisplay.tracklist[i]);\r\n            \r\n        }\r\n        if(this.state.changePlaybackTriggerPrevious)\r\n        {   \r\n            if(this.state.iteratorPlaylist > 0)\r\n            {\r\n                var i = this.state.iteratorPlaylist -1;\r\n            }\r\n            else\r\n            {\r\n                var i = 0;\r\n            }\r\n            console.log('previous song: ',this.state.playlistDisplay.tracklist[i]);\r\n            \r\n            this.playSong(this.state.playlistDisplay.tracklist[i]);\r\n        }\r\n    }\r\n\r\n    getMusicInfo = () => {\r\n        console.log(\"Fetching playback info...\");\r\n        fetch(\"/getplayback\", {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({userid: this.state.userID}),\r\n          })\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"res is:\" , res);\r\n            if(res !== null && res!== undefined)\r\n            {\r\n                console.log(\"Fetched!\");\r\n                this.setState({\r\n                    item: res.item,\r\n                    refreshToggled: false,\r\n                    playback: res.is_playing,\r\n                });\r\n            }\r\n        })\r\n        );\r\n    }\r\n    \r\n    playpausePlayback = (action) => {\r\n        console.log(\"Playing/pausing playback...\");\r\n        fetch(\"/\"+action, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({userid: this.state.userID}),\r\n          })\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Done!: \", res);\r\n                this.setState({\r\n                    playbackCommandtrigger: false,\r\n                });\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    playSong = (songuri) => {\r\n        fetch(\"/playsong\", \r\n        {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({uri: `${songuri}`, deviceID: `${this.state.deviceID}`, userid: this.state.userID}),\r\n        }).then(res => res.json()\r\n        .then(res => {\r\n            console.log(res);\r\n            if((this.state.iteratorPlaylist) < this.state.playlistDisplay.tracklist.length)\r\n            {\r\n                console.log(\"Waiting for spotify to change song...\");\r\n                setTimeout( () => {\r\n                    if(this.state.changePlaybackTriggerNext)\r\n                    {\r\n                        this.setState({\r\n                            refreshToggled: true,\r\n                            changePlaybackTriggerNext: false,\r\n                            iteratorPlaylist: this.state.iteratorPlaylist + 1,\r\n                        });\r\n                    }\r\n                    else if(this.state.changePlaybackTriggerPrevious){\r\n                        this.setState({\r\n                            refreshToggled: true,\r\n                            changePlaybackTriggerPrevious: false,\r\n                            iteratorPlaylist: this.state.iteratorPlaylist + 1,\r\n                        });\r\n                    }\r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n            }\r\n            else{\r\n                setTimeout( () => {\r\n                    this.setState({refreshToggled: true, changePlaybackTriggerNext: false, iteratorPlaylist: 0});\r\n                    console.log(\"Reset iterator: \", this.state.iteratorPlaylist);\r\n                \r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n            }\r\n           \r\n        }));\r\n        \r\n    } \r\n\r\n    changePlaybackNext = () => {\r\n        console.log(\"Changing playback...\");\r\n        fetch(\"/next\")\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Fetched!: \", res);\r\n                this.setState({\r\n                    changePlaybackTriggerNext: false,\r\n                });\r\n                console.log(\"Waiting for spotify to change song...\");\r\n                setTimeout( () => {\r\n                    this.setState({refreshToggled: true});\r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n                    \r\n            }\r\n            else{\r\n                alert(\"Error from spotify\");\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    changePlaybackPrevious = (action) => {\r\n        console.log(\"Changing playback...\");\r\n        fetch(\"/previous\")\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Fetched!: \", res);\r\n                this.setState({\r\n                    changePlaybackTriggerPrevious: false,\r\n                });\r\n                console.log(\"Waiting for spotify to change song...\");\r\n                setTimeout( () => {\r\n                    this.setState({refreshToggled: true});\r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n                    \r\n            }\r\n            else{\r\n                alert(\"Error from spotify\");\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    getSelectedPlaylist = (playlist, group) => {\r\n        console.log(\"Got selected playlist in dashboard: \", `${playlist.tracklist} from group: ${group}`);\r\n        this.setState({playlistDisplay: playlist, iteratorPlaylist: 0, group: group});\r\n    }\r\n\r\n    getSelectedGroup = (group) => {\r\n        console.log(\"Got selected group in dashboard: \", group);\r\n        this.setState({group: group});\r\n    }\r\n\r\n    addedSongtoPlaylist = (newplaylist, group) => {\r\n        console.log(\"Got updated playlist in dashboard: \", `${newplaylist} from group: ${group}`);\r\n        this.setState({playlistDisplay: newplaylist, playlistToMyGroups: newplaylist, group: group});\r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            <div id=\"mainrow\" className=\"row\">    \r\n                <div id=\"mygroups\" className=\"col-2 \">\r\n                    <div className=\"row justify-content-center groupR\">\r\n                        <h2 className=\"titleGroup\">My groups</h2>\r\n                        <MyGroups userid={this.state.userID} user={this.state.user} getplaylist={this.getSelectedPlaylist} getGroup={this.getSelectedGroup} selectedGroup={this.state.group} playlistToMyGroups={this.state.playlistToMyGroups}/>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"col-7\">\r\n                    <div className=\"row nowplaying \">\r\n                        <div className=\"col-6\">\r\n                            { (this.state.item === null || this.state.item === undefined ) ?\r\n                                <div>    \r\n                                <h2 className=\"nowP\">Now Playing: [Nothing is playing]</h2>\r\n                                { this.state.user !== '' ?\r\n                                    <button className=\"btn btn-warning\" onClick={() => this.setState({refreshToggled: true})}>Refresh</button>\r\n                                :\r\n                                    <div></div>\r\n                                }\r\n                                { this.state.playlistDisplay !== null ?\r\n                                    <button className=\"btn btn-primary\" onClick={() => this.setState({changePlaybackTriggerNext: true})}>Play Next</button>\r\n                                :\r\n                                    <div>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                            : \r\n                                <div>\r\n                                    <h2 className=\"nowP\">Now Playing:</h2>\r\n                                    <h5 className=\"songName\">{this.state.item.name}</h5>\r\n                                    <h6 className=\"artistName\">Artist: {this.state.item.artists[0].name}</h6>\r\n                                    <h6 className=\"albumName\">Album: {this.state.item.album.name}</h6>\r\n                                    \r\n                                    <button className=\"btn btn-warning res\" onClick={() => this.setState({refreshToggled: true})}>Refresh</button>\r\n                                    { this.state.playback ?\r\n                                        <button className=\"btn btn-danger res\" onClick={() => this.setState({playbackCommandtrigger: true, playback: false})}>Pause</button>\r\n                                    :\r\n                                        <button className=\"btn btn-success res\" onClick={() => this.setState({playbackCommandtrigger: true, playback: true})}>Play</button>\r\n                                    }\r\n                                    { this.state.playlistDisplay !== null && this.state.iteratorPlaylist < this.state.playlistDisplay.tracklist.length ?\r\n                                        <button className=\"btn btn-primary res\" onClick={() => this.setState({changePlaybackTriggerNext: true})}>Next</button>\r\n                                    :\r\n                                        <button className=\"btn btn-primary res\" disabled>Next</button>\r\n                                    }\r\n                                    \r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            { (this.state.item === null || this.state.item === undefined) ?\r\n                                <h2></h2>\r\n                            :\r\n                                <div>\r\n                                    <img src={`${this.state.item.album.images[1].url}`} alt=\"Cover\"></img> \r\n                                    \r\n                                </div>\r\n                            }\r\n                            \r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <div>\r\n                        <Nextup userid={this.state.userID} playlist={this.state.playlistDisplay} getUpdatedPlaylist={this.addedSongtoPlaylist} group={this.state.group} nextup={this.state.iteratorPlaylist}/>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div id=\"chat\" className=\"col-3\">\r\n                <Chat group={this.state.group} author={this.state.user}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport TopHeader from './topheader/topheader';\r\nimport Dashboard from './dashboard/dashboard';\r\nimport './App.css';\r\nimport Vynil from './img/vynil.svg';\r\nimport Record from './img/record.svg';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      loggedin: false,\r\n      userState: '',\r\n      deviceID: null,\r\n      devicename: null,\r\n      deviceactive: false,\r\n      userID: null,\r\n      getUserToggled: false\r\n    };\r\n  };\r\n\r\n  componentDidMount(){\r\n    if(this.state.userID === null)\r\n        {\r\n            console.log(\"Requesting client id...\");\r\n            fetch(\"/authorize\")\r\n            .then(res => res.json()\r\n            .then(res => {\r\n                console.log(\"Fetched client ID:\", res.userid);\r\n                this.setState({userid: res.userid});\r\n                console.log(\"client id:\", this.state.userid);\r\n                this.getID(res.userid);\r\n            }));\r\n    }\r\n    \r\n    if(this.state.loggedin !== true)\r\n    {\r\n      console.log(\"fetching getUser on mount...\");\r\n      fetch(\"/getUser\", \r\n      {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({userid: this.state.userID}),\r\n      })\r\n      .then(res => res.json()\r\n      .then(res => {\r\n        if(res.statusCode === 200)\r\n        {\r\n          if(res.displayname !== this.state.userState)\r\n          {\r\n            console.log(\"Fetched!\", res.displayname);\r\n            this.setState({userState: res.displayname, loggedin: true});\r\n          }\r\n        }\r\n        else{\r\n          console.log(\"Error code: \", res.statusCode);\r\n          if(res.statusCode === \"tryagain\")\r\n          {\r\n            this.setState({getUserToggled: true});\r\n          }\r\n        }\r\n        \r\n      }))\r\n      .catch(err =>{\r\n        console.log(\"Error with GetUser\");\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(){\r\n\r\n\r\n    if(this.state.getUserToggled && !this.state.loggedin)\r\n    {\r\n      setTimeout( () => {\r\n        \r\n      \r\n      console.log(\"fetching getUser...\");\r\n      fetch(\"/getUser\", \r\n      {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({userid: this.state.userID}),\r\n      })\r\n      .then(res => res.json()\r\n      .then(res => {\r\n        if(res.statusCode === 200)\r\n        {\r\n          if(res.displayname !== this.state.userState)\r\n          {\r\n            console.log(\"Fetched!:\", res.displayname);\r\n            this.setState({userState: res.displayname, loggedin: true, getUserToggled: false});\r\n          }\r\n        }\r\n        else{\r\n          console.log(\"Error code: \", res.statusCode);\r\n          if(res.statusCode === \"tryagain\")\r\n          {\r\n            this.setState({getUserToggled: true});\r\n          }\r\n        }\r\n        \r\n      }))\r\n      .catch(err =>{\r\n        console.log(\"Error with GetUser\");\r\n      });\r\n\r\n      }, 500);\r\n    }\r\n\r\n    if(this.state.deviceID === null && this.state.loggedin ===  true)\r\n    {\r\n      console.log(\"Device id:\", this.state.deviceid);\r\n      console.log(\"Logged in:\", this.state.loggedin);\r\n      fetch(\"/mydevices\", {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({userid: this.state.userID}),\r\n      })\r\n      .then(res => res.json()\r\n      .then(res => {\r\n        if(res.length === 0)\r\n        {\r\n          alert(\"No listening is activated. Open your web browser at open.spotify.com, active your device (play/pause) and reload page.\");\r\n        }\r\n        else{\r\n          console.log(\"Device found: \", res[0]);\r\n          if(res[0].deviceid !== this.state.deviceID)\r\n          {\r\n            this.setState({deviceID: res[0].deviceid, devicename: res[0].devicename, deviceactive: res[0].deviceactive});\r\n          }\r\n        }\r\n        \r\n      }));\r\n    }\r\n  }\r\n\r\n  getID = (id) =>{\r\n    this.setState({userID: id});\r\n    console.log(\"App got client id:\", this.state.userID);\r\n  }\r\n\r\n  render()\r\n  {  \r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.loggedin\r\n                  ? <div><TopHeader user={this.state.userState} getID={this.getID} devicename={this.state.devicename} deviceactive={this.state.deviceactive}/>\r\n                      <div className=\"container-fluid\">  \r\n                        <Dashboard user={this.state.userState} deviceID={this.state.deviceID} userid={this.state.userID}/>\r\n                      </div>\r\n                      </div>\r\n                  : <div className=\"Plus\">\r\n                    <header className=\"App-header\">\r\n                      <button className=\"Home\">\r\n                      </button>\r\n                      <div className=\"\">\r\n                        <a className=\"Login\" href={`/login/${this.state.userID}`}>\r\n                          Log In\r\n                        </a>\r\n                        <a href=\"https://www.spotify.com/us/\" className=\"Register\">\r\n                          Register Now!\r\n                        </a>\r\n                      </div>\r\n                    </header>\r\n                    <div className=\"MiddleTitle\">\r\n                      <h2 className=\"Black\">Be the life of the party!</h2>\r\n                      <h1 className=\"Title\">SHARING MUSIC</h1>\r\n                      <h1 className=\"Title\">NEVER FELT SO <span className=\"Outline\">GOOD</span></h1>\r\n                      <img alt=\"Vynil\" src={Vynil} className=\"Vynil\"/>\r\n                      <img alt=\"Record\" src={Record} className=\"Record\"/>\r\n                      <a  href={`/login/${this.state.userID}`}  className=\"Button\">\r\n                        <svg><g><line x2=\"227.62\" y1=\"31.28\" y2=\"31.28\"></line><polyline points=\"222.62 25.78 228.12 31.28 222.62 36.78\"></polyline><circle cx=\"224.67\" cy=\"30.94\" r=\"30.5\" transform=\"rotate(180 224.67 30.94) scale(1, -1) translate(0, -61)\"></circle></g>\r\n                        </svg><font>Enter the Sound</font>\r\n                      </a>\r\n                    </div>\r\n                    <footer className=\"Foot\">\r\n                      <p className=\"Copyright\">&#xA9; Antoine & Juan</p>\r\n                      <button className=\"About\">\r\n                      ABOUT\r\n                      </button>\r\n                    </footer>\r\n                 </div>\r\n        }\r\n          \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}