{"version":3,"sources":["topheader/img/record.svg","img/vynil.svg","img/record.svg","hash.js","topheader/topheader.js","dashboard/mygroups/mygroups.js","dashboard/chat/chat.js","dashboard/nextup/nextup.js","dashboard/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","TopHeader","props","handleScanDeviceClick","getDevicesID","toggleLogOut","sessionStorage","removeItem","state","user","userid","devicename","deviceactive","this","setState","Navbar","className","expand","Brand","href","alt","src","logo","Toggle","bg","aria-controls","Collapse","id","Nav","Link","NavDropdown","alignRight","title","Item","onClick","Divider","React","Component","MyGroups","handleSelectedPlaylist","val","console","log","name","getplaylist","handleSelectedGroup","target","getAttribute","getGroup","handleInputChange","event","value","handleAddPlaylistSubmit","preventDefault","newPlaylist","fetch","method","body","JSON","stringify","newplaylist","relatedgroup","newPlaylistGroup","headers","then","res","json","resp","getgroups","handleAddGroupSubmit","newGroup","newgroup","userID","setTimeout","handleAddMemberSubmit","newMember","newMemberGroup","loggedIn","groups","selectedGroup","updatedPlaylist","playlistToMyGroups","map","element","i","playlists","length","groupname","playlist","index","tracklist","newgroups","getAllgroups","Accordion","as","Card","Header","eventKey","Body","onSubmit","Form","Group","Control","onChange","type","placeholder","Button","variant","defaultActiveKey","group","members","member","displayName","role","ToggleButtonGroup","vertical","ToggleButton","Chat","useState","setGroup","author","setAuthor","typedMessage","setTypedMessage","messageCollection","setMessages","setErr","useEffect","HOST","origin","replace","chatSocket","WebSocket","onopen","onmessage","msg","parse","data","messages","setupWS","success","catch","err","message","writtenmessage","class","Nextup","getTrackInfos","tracks","track","artists","album","Math","floor","duration_ms","toFixed","uri","searchSubmit","searchedTrack","items","foundTracks","addSongtoMongo","song","uriTrack","playlistname","getUpdatedPlaylist","nextup","urilist","style","Table","striped","border","div","bind","Dashboard","getGroupPlaying","requestedGroup","undefined","playnow","isplaying","playSong","playNowSong","playpausePlayback","getMusicInfo","refreshToggled","playback","is_playing","action","playbackCommandtrigger","songuri","deviceID","changePlaybackTriggerNext","iteratorPlaylist","setPlayNowSong","playlistDisplay","changePlaybackTriggerPrevious","changePlaybackNext","alert","changePlaybackPrevious","getSelectedPlaylist","getSelectedGroup","addedSongtoPlaylist","getGroupPlayback","playListCommandtrigger","changePlayback","disabled","images","url","App","getDeviceID","getID","openSpotify","open","loggedin","sessionExists","userState","LandinguserID","getUserToggled","userIDsession","getItem","statusCode","displayname","setItem","deviceid","Vynil","Record","x2","y1","y2","points","cx","cy","r","transform","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.f4ae36ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/record.b3d8db83.svg\";","module.exports = __webpack_public_path__ + \"static/media/vynil.2840d63a.svg\";","module.exports = __webpack_public_path__ + \"static/media/record.b3d8db83.svg\";","const hash = window.location.hash\r\n    .substring(1)\r\n    .split(\"&\")\r\n    .reduce(function(initial, item) {\r\n        if (item) {\r\n        var parts = item.split(\"=\");\r\n        initial[parts[0]] = decodeURIComponent(parts[1]);\r\n        }\r\n        return initial;\r\n    }, {});\r\nwindow.location.hash = \"\";\r\n\r\nexport default hash;","import React from 'react';\r\nimport { Navbar, Button, Form, FormControl, NavDropdown, Nav } from 'react-bootstrap';\r\nimport './topheader.css';\r\nimport hash from \"../hash\";\r\nimport * as $ from \"jquery\";\r\nimport logo from './img/record.svg'\r\n\r\n\r\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\r\n\r\nconst client_id = process.env.REACT_APP_CLIENT_ID;\r\nconst redirect_uri = process.env.REACT_APP_REDIRECT_URI;\r\n\r\nconst scopes = [\r\n  \"user-read-currently-playing\",\r\n  \"user-read-playback-state\",\r\n  \"user-modify-playback-state\",\r\n  \"user-read-email\",\r\n];\r\n\r\n\r\nclass TopHeader extends React.Component{\r\n    \r\n    constructor(props){\r\n        super();\r\n        \r\n        this.state = {\r\n            user: '',\r\n            userid: null,\r\n            devicename: null, \r\n            deviceactive: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        \r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        if(this.props.user !== this.state.user)\r\n        {this.setState({user: this.props.user});}\r\n\r\n        if(this.state.devicename !== this.props.devicename && this.props.devicename !== null)\r\n        {\r\n            this.setState({devicename: this.props.devicename, deviceactive: `${this.props.deviceactive}`})\r\n        }\r\n        \r\n    }\r\n\r\n    handleScanDeviceClick = () => {\r\n        this.props.getDevicesID();\r\n    }\r\n\r\n    toggleLogOut = () => {\r\n        sessionStorage.removeItem('useridsession');\r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            \r\n            <Navbar  className=\"topheader\"  expand=\"lg\">\r\n                <Navbar.Brand className=\"brandLogo\" href=\"/\"><img className=\"logo\" alt=\"logo\" src={logo}/></Navbar.Brand>\r\n                <Navbar.Toggle bg=\"light\" aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse bg=\"light\" id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                    </Nav>\r\n                    { (this.state.user === '') ?\r\n                    <Nav className=\"ml-auto logintag\">\r\n                        <Nav.Link className=\"topheader unique white\" href={`/login/${this.state.userid}`}>Login with Spotify</Nav.Link>\r\n                    </Nav>\r\n                    :\r\n                    <Nav bg=\"light\" className=\"ml-auto\">\r\n                        <NavDropdown alignRight className=\"myaccountTag\" title=\"My Account\" id=\"dropdown-menu-align-right\">\r\n\r\n                            <NavDropdown.Item className=\"white\">Hello, {this.state.user}</NavDropdown.Item>\r\n                            { this.state.devicename === null ? \r\n                                <div className=\"text-center\"><NavDropdown.Item className=\"white\">Device name: [No active device]</NavDropdown.Item>\r\n                                <button onClick={this.handleScanDeviceClick} className=\"btn btn-success \">Scan devices</button></div>\r\n                            :\r\n                                <NavDropdown.Item className=\"white\">Device name: {this.state.devicename}</NavDropdown.Item>\r\n                            }\r\n                            \r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item className=\"white\" onClick={this.toggleLogOut} href=\"/\">Log out</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                    } \r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default TopHeader;","import React from 'react';\r\nimport './mygroups.css';\r\nimport {Accordion, Card, ToggleButtonGroup, ToggleButton, Form, Button, Collapse} from 'react-bootstrap';\r\n\r\nclass MyGroups extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            user: '',\r\n            userID: null,\r\n            loggedIn: false,\r\n            getgroups: false,\r\n            groups: null,\r\n            newPlaylist: '',\r\n            newPlaylistGroup: '',\r\n            newGroup: '',\r\n            newMember: '',\r\n            newMemberGroup: '',\r\n            selectedGroup: null,\r\n            updatedPlaylist: null,\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(this.props.user !== this.state.user && this.props.user !== '' && this.state.userID !== this.props.userid) // when user changes\r\n        {\r\n            this.setState({user: this.props.user, loggedIn: true, getgroups: true, userID: this.props.userid});\r\n            \r\n        }\r\n\r\n        if(this.state.selectedGroup !== this.props.selectedGroup)\r\n        {\r\n            this.setState({selectedGroup: this.props.selectedGroup});\r\n        }\r\n\r\n        if(this.state.groups !== null && this.state.selectedGroup !== null && this.props.playlistToMyGroups !== this.state.updatedPlaylist)\r\n        {\r\n            var groups = this.state.groups;\r\n            groups.map((element, i) => {\r\n                if(element.playlists.length && element.groupname === this.state.selectedGroup)\r\n                {\r\n                    var playlists = element.playlists;\r\n                    playlists.map((playlist, index) => {\r\n                        if(playlist.name === this.props.playlistToMyGroups.name)\r\n                        {\r\n                            console.log(\"Old tracklist:\", playlist.tracklist);\r\n                            console.log(\"to update with:\", this.props.playlistToMyGroups.tracklist);\r\n                            if(playlist.tracklist !== this.props.playlistToMyGroups.tracklist)\r\n                            {\r\n                                \r\n                                var newgroups = groups;\r\n                                newgroups[i].playlists[index].tracklist = this.props.playlistToMyGroups.tracklist;\r\n                                this.setState({groups: newgroups, updatedPlaylist: this.props.playlistToMyGroups});\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }    \r\n\r\n        if(this.state.loggedIn === true && this.state.getgroups === true)\r\n        {\r\n            console.log(\"Actual groups are:\", this.state.groups);\r\n            this.getAllgroups();\r\n        }\r\n\r\n    }\r\n\r\n    getAllgroups() {\r\n        fetch(\"/getallgroups\", {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({userid: this.state.userID}),\r\n        })\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"Fetch groups : \", res);\r\n            this.setState({groups: res, getgroups: false})\r\n            \r\n        }));\r\n    }\r\n\r\n    handleSelectedPlaylist = (val) => {\r\n        console.log(\"Selected playlist in MyGroups: \", `${val[0].name} from group: ${val[1]}`);\r\n        this.props.getplaylist(val[0], val[1]);\r\n    }\r\n\r\n    handleSelectedGroup = (val) => {\r\n        console.log(\"Active group is: \", val.target.getAttribute(\"value\") );\r\n        this.props.getGroup(val.target.getAttribute(\"value\"));\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: [event.target.value], \r\n        })\r\n    }\r\n\r\n    handleAddPlaylistSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.newPlaylist.value !== '')\r\n        {\r\n            fetch('/createplaylist', \r\n            {\r\n                method: 'POST', \r\n                body: JSON.stringify({newplaylist: `${this.state.newPlaylist}`, relatedgroup: `${event.target.newPlaylistGroup.value}`}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                console.log(\"addplaylist response:\", resp);\r\n                if(resp !== null)\r\n                {\r\n                    this.setState({newPlaylist: '', newPlaylistGroup: '', getgroups: true});\r\n                    console.log(this.state.newPlaylist);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleAddGroupSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.newGroup.value !== '')\r\n        {\r\n            var newArchivegroup = this.state.newGroup;\r\n            fetch('/creategroup', \r\n            {\r\n                method: 'POST', \r\n                body: JSON.stringify({newgroup: `${this.state.newGroup}`, userid: this.state.userID}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                if(resp !== null)\r\n                {\r\n                    setTimeout( () => {\r\n                        this.setState({newGroup: '', getgroups: true});\r\n                    }, 1000);\r\n                    console.log(\"Group and chat archive created\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleAddMemberSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.newMember.value !== '')\r\n        {\r\n            fetch('/addmember', \r\n            {\r\n                method: 'POST', \r\n                body: JSON.stringify({newMember: `${this.state.newMember}`, relatedgroup: `${event.target.newMemberGroup.value}`}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                if(resp !== null)\r\n                {\r\n                    this.setState({newMember: '', newMemberGroup: '', getgroups: true});\r\n                    \r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"fullsize\">\r\n                { this.state.user !== null ?\r\n                    <div className=\"fullsize\">\r\n\r\n                        <Accordion>\r\n                            <Accordion.Toggle as={Card.Header} eventKey={1}>\r\n                                Create Group\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey={1}>\r\n                                <Card.Body>\r\n                                    <form onSubmit={this.handleAddGroupSubmit}>\r\n                                        <Form>\r\n                                            <Form.Group>\r\n                                            <Form.Control className=\"input\" onChange={this.handleInputChange} name=\"newGroup\" type=\"text\" placeholder=\"Enter name\" value={this.state.newGroup}/>\r\n                                            </Form.Group>\r\n                                            <Button className=\"btnAddPlaylist\" variant=\"success\" type=\"submit\">\r\n                                                Create\r\n                                            </Button>\r\n                                        </Form>\r\n                                    </form>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Accordion>\r\n                        { this.state.groups !== null ?\r\n                            <Accordion defaultActiveKey=\"0\">\r\n                                {   this.state.groups.map((group, index) =>\r\n                                    {\r\n                                        return (\r\n                                        <Card>\r\n                                            <Accordion.Toggle as={\"button\"} className=\"btn btn-secondary\" onClick={this.handleSelectedGroup} value={group.groupname} eventKey={index}>\r\n                                                {group.groupname}\r\n                                            </Accordion.Toggle>\r\n                                            <Accordion.Collapse eventKey={index}>\r\n                                                <Card.Body>\r\n                                                    <h4>Members</h4>\r\n                                                    <ul id=\"MemberList\">\r\n                                                        {group.members.map((member, i) => {\r\n                                                            var displayName = member.split(\"@\")[0];\r\n                                                            return(<h6>{displayName}</h6>)\r\n                                                            })\r\n                                                        }\r\n                                                    </ul>\r\n                                                    <Accordion>\r\n                                                        <Accordion.Toggle as={Button} eventKey={3}>\r\n                                                            Add Member\r\n                                                        </Accordion.Toggle>\r\n                                                       \r\n                                                        <Accordion.Collapse eventKey={3}>\r\n                                                            <Card.Body>\r\n                                                                <form onSubmit={this.handleAddMemberSubmit}>\r\n                                                                    <Form role=\"form\">\r\n                                                                        <Form.Group>\r\n                                                                            <Form.Control name=\"newMemberGroup\" type=\"hidden\" value={this.state.groups[index].groupname}/>\r\n                                                                            <Form.Control onChange={this.handleInputChange} name=\"newMember\" type=\"email\" placeholder=\"Enter email\" value={this.state.newMember}/>\r\n                                                                            \r\n                                                                            <Button className=\"btnAddPlaylist\" variant=\"success\" type=\"submit\">\r\n                                                                                Add\r\n                                                                            </Button>\r\n                                                                        </Form.Group>\r\n                                                                    </Form>\r\n                                                                </form>\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </Accordion>\r\n                                                    <h4 className=\"labelPlaylist\">Playlists</h4>\r\n                                                    <div id=\"fixedspacing\">\r\n                                                        <p></p>\r\n                                                    </div>\r\n                                                    <ToggleButtonGroup type=\"radio\" name=\"playlists\" vertical onChange={this.handleSelectedPlaylist}>\r\n                                                        {group.playlists.map((playlist, i) => {\r\n                                                            return(\r\n            \r\n                                                                <ToggleButton id=\"playlistbtns\" value={[this.state.groups[index].playlists[i],this.state.groups[index].groupname]} >{playlist.name}</ToggleButton>\r\n                                                                \r\n                                                            )\r\n                                                        })\r\n                                                        }\r\n                                                    </ToggleButtonGroup>\r\n                                                    <div id=\"fixedspacing\">\r\n                                                        <p></p>\r\n                                                    </div>\r\n                                                    <Accordion>\r\n                                                        <Accordion.Toggle as={Button} eventKey={2}>\r\n                                                            Create Playlist\r\n                                                        </Accordion.Toggle>\r\n                                                       \r\n                                                        <Accordion.Collapse eventKey={2}>\r\n                                                            <Card.Body>\r\n                                                                <form onSubmit={this.handleAddPlaylistSubmit}>\r\n                                                                    <Form role=\"form\">\r\n                                                                        <Form.Group>\r\n                                                                            <Form.Control name=\"newPlaylistGroup\" type=\"hidden\" value={this.state.groups[index].groupname}/>\r\n                                                                            <Form.Control onChange={this.handleInputChange} name=\"newPlaylist\" type=\"text\" placeholder=\"Enter name\" value={this.state.newPlaylist}/>\r\n                                                                            \r\n                                                                            <Button className=\"btnAddPlaylist\" variant=\"success\" type=\"submit\">\r\n                                                                                Create\r\n                                                                            </Button>\r\n                                                                        </Form.Group>\r\n                                                                    </Form>\r\n                                                                </form>\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </Accordion>\r\n                                              </Card.Body>\r\n                                            </Accordion.Collapse>\r\n                                        </Card>\r\n                                        \r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Accordion> \r\n                        :\r\n                            <div>\r\n                                \r\n                            </div>\r\n                        }\r\n                            \r\n                    </div>\r\n                    :\r\n                    <h4>Not logged in</h4>\r\n                }\r\n                    \r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MyGroups;","import React, { useState, useEffect } from 'react';\r\n\r\nimport './chat.css';\r\n\r\nfunction Chat(props) {\r\n\r\n    const [selectedGroup, setGroup] = useState( null );\r\n    const [author, setAuthor] = useState( '' );\r\n    const [typedMessage, setTypedMessage] = useState( '' );\r\n    const [messageCollection, setMessages] = useState([]);\r\n   \r\n    const [err, setErr] = useState(null); \r\n    \r\n    const setupWS = (group) => {\r\n        var HOST = window.location.origin.replace(/^http/, 'ws');\r\n        var chatSocket = new WebSocket(HOST);\r\n        console.log(\"Host is\", HOST);\r\n        chatSocket.onopen = () => {\r\n            console.log(\"WS client connected\");\r\n\r\n            chatSocket.onmessage = (msg) => {\r\n                console.log(\"WS client set message:\", JSON.parse(msg.data));\r\n                var updatedMessages = JSON.parse(msg.data);\r\n                updatedMessages.map((group, index) => {\r\n                    if(group.groupname === props.group)\r\n                    {\r\n                        setMessages(group.messages);\r\n                    }\r\n                })\r\n                \r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(props.group !== '')\r\n        {\r\n            // add something to delete previous socket. You don't want to open infinite websockets!\r\n            setupWS(props.group);\r\n            setAuthor(props.author);\r\n            setGroup(props.group);\r\n            setMessages([]);\r\n        }\r\n    }, [props.group]);\r\n\r\n    useEffect(() => {\r\n        fetch(\"/allgroupmessages\", {\r\n            method:'POST', \r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({group: props.group}), \r\n        })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n            if(!res.success)\r\n            {\r\n                console.log(\"No group registered\");\r\n                return;\r\n            }\r\n            else{\r\n            console.log(\"Setting messageCollection\", res.data.messages);\r\n            setMessages(res.data.messages);\r\n            }\r\n        })\r\n        .catch((err) => setErr(err));\r\n    }, [selectedGroup]);\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n        \r\n        var group = event.target[0].value;\r\n        var author = event.target[1].value;\r\n        var writtenmessage = event.target[2].value;\r\n        setTypedMessage('');\r\n        fetch(\"/sendchatmessage\", \r\n        {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({group: group, author: author, writtenmessage: writtenmessage}),\r\n        }).then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"Done.\", res);\r\n        }));\r\n    }\r\n\r\n    const handleInputChange = (event) => {\r\n        setTypedMessage(event.target.value);\r\n    }\r\n\r\n    return(\r\n        <div className=\"chat\">\r\n            { props.group === \"\" ? \r\n            <div>\r\n                <h2>Group chat</h2>\r\n                <h2>[No group selected]</h2>\r\n            </div>\r\n            :\r\n            <div>\r\n                <h2>Group chat: {selectedGroup}</h2>\r\n                <div id=\"chatbox\" className=\"row justify-content-center p-3\">    \r\n                    <table className=\"tablechat\">\r\n                        <thead>\r\n                            <th className=\"user\"></th>\r\n                            <th className=\"message\"></th>\r\n                        </thead>\r\n                    \r\n                        <tbody>\r\n                        {messageCollection.map((message, index) => \r\n                            {\r\n                            return(\r\n                                <tr>\r\n                                    <td className=\"user\">{message[1]} said: </td>\r\n                                    <td className=\"message\">{message[0]}</td>\r\n                                </tr>\r\n                            )\r\n                            }\r\n                        )\r\n                        }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <form onSubmit={sendMessage} class=\"form-inline justify-content-left p-3\">\r\n                        <div class=\"form-group mb-2\">\r\n                            <input className=\"form-control\" name=\"group\" value={selectedGroup} type=\"hidden\"/>\r\n                            <input className=\"form-control\" name=\"author\" value={author} type=\"hidden\"/>\r\n                            <input onChange={handleInputChange} value={typedMessage} className=\"form-control\" name=\"writtenMessage\" type=\"text\" placeholder=\"Write a message...\"/>\r\n                        </div>\r\n                        <button className=\"btn btn-success mb-2\" type=\"submit\">Send</button>\r\n                    </form>\r\n                </div>    \r\n            </div>\r\n            }\r\n            \r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Chat;","import React, { useLayoutEffect } from 'react';\r\nimport './nextup.css';\r\nimport {Table} from 'react-bootstrap';\r\n\r\nclass Nextup extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            group: '',\r\n            userID: null,\r\n            playlist: null,\r\n            playlistname: null,\r\n            tracklist: [[\"\", \"\"]],\r\n            nextup: 0,\r\n            searchedTrack: '',\r\n            foundTracks: [],\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        \r\n        if(this.state.playlist !== this.props.playlist && this.props.playlist !== null && this.props.groups !== this.state.group)\r\n        { \r\n            var urilist = [];\r\n            this.props.playlist.tracklist.map((element,i) => {\r\n                return  urilist[i] = element;\r\n            });\r\n            this.setState({playlist: this.props.playlist, playlistname: this.props.playlist.name, group: this.props.group});\r\n            if(urilist.length > 0)\r\n            {\r\n                this.getTrackInfos(urilist);\r\n            }\r\n            else{\r\n                this.setState({tracklist: [[\"\", \"\"]]});\r\n            }\r\n        }\r\n\r\n        if(this.props.user !== '' && this.state.userID !== this.props.userid)\r\n        {\r\n            this.setState({userID: this.props.userid});\r\n        }\r\n\r\n        if(this.state.nextup !== this.props.nextup)\r\n        {\r\n            if(this.props.nextup < this.state.tracklist.length)\r\n            {\r\n                this.setState({nextup: this.props.nextup});\r\n            }\r\n\r\n            if(this.state.tracklist.length === 0)\r\n            {\r\n                this.setState({nextup: 0});\r\n            }\r\n            \r\n        }\r\n\r\n    \r\n    }\r\n\r\n    getTrackInfos = (tracklist) => {\r\n        fetch(\"/gettracksinfo\", \r\n        {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({tracks: tracklist, userid: this.state.userID}),\r\n        }).then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"Fetched tracks info:\", res);\r\n            var tracks = [];\r\n            res.map((track, i) => {\r\n                return tracks[i] = [track.name, track.artists[0].name, track.album.name, `${(Math.floor(track.duration_ms/60000)).toFixed(0)}:${((track.duration_ms/1000)%60).toFixed(0)}`, track.uri];\r\n            });\r\n            console.log(\"Tracks:\", tracks);\r\n            this.setState({tracklist: tracks});\r\n        }));\r\n        \r\n    } \r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: [event.target.value], \r\n        })\r\n    }\r\n\r\n    searchSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.searchedTrack.value !== '')\r\n        {\r\n            fetch('/searchtracks', {\r\n                method:'POST',\r\n                body: JSON.stringify({searchedTrack: `${this.state.searchedTrack}`, userid: this.state.userID}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                if(resp !== null)\r\n                {\r\n                    console.log(\"Returned tracks:\", resp.items);\r\n                    var tracks = [];\r\n                    resp.items.map((track, index) => {\r\n                        return tracks[index] = [track.name, track.artists[0].name, track.album.name, track.uri];\r\n                    })\r\n                    this.setState({foundTracks: tracks, searchedTrack: ''});\r\n                    console.log(\"tracks: \", this.state.foundTracks);\r\n                }\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    addSongtoMongo = (song) => {\r\n        console.log(song.target.value);\r\n        var uri = song.target.value.split(':');\r\n        fetch(\"/addtracktoplaylist\", {\r\n            method:'POST',\r\n            body: JSON.stringify({uriTrack: `${uri[2]}`,playlist: `${this.state.playlistname}`, group: `${this.state.group}`, userid: this.state.userID}),\r\n            headers: { 'Content-Type': 'application/json' },\r\n        }).then(res => res.json())\r\n        .then(resp => {\r\n            console.log(\"Playlists\", resp);\r\n            this.setState({foundTracks: []});\r\n            this.props.getUpdatedPlaylist(resp, this.state.group);\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"row nextupAddsong\" style={{}}>\r\n                <div className=\"col-6\">\r\n                { this.state.playlist !== null ?\r\n                    <div className=\"nextupSection\">\r\n                        <h3 className=\"bigF\">Next up: {this.state.tracklist[this.state.nextup][0]} - {this.state.tracklist[this.state.nextup][1]}</h3>\r\n                        <label>Playlist name: {this.state.playlistname} Group: {this.state.group}</label>\r\n                        <Table striped border>\r\n                            <thead className=\"nextup\">\r\n                                <th>#</th>\r\n                                <th>Song</th>\r\n                                <th>Artist</th>\r\n                                <th>Album</th>\r\n                                <th>Duration</th>\r\n                            </thead>\r\n                            <tbody>\r\n                            {this.state.tracklist.map((element, index) => {\r\n                                return(<tr className=\"nextup\">\r\n                                    <td>{index+1}</td>\r\n                                    <td>{element[0]}</td>\r\n                                    <td>{element[1]}</td>\r\n                                    <td>{element[2]}</td>\r\n                                    <td>{element[3]}</td>\r\n                                </tr>)\r\n                            })\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                        \r\n                    </div>\r\n                :\r\n                    <h2 className=\"nextup\">[No playlist selected]</h2>\r\n                }\r\n                </div>\r\n                <div className=\"col-6 nextupSection\">\r\n                    <h2 div className=\"nextup\">Add song to playlist</h2>\r\n                    { this.state.playlist !== null ?\r\n                    <div>\r\n                        <form class=\"form-inline justify-content-center\" onSubmit={this.searchSubmit}>\r\n                            <div class=\"form-group mb-2 \">\r\n                                <input onChange={this.handleInputChange} className=\"form-control\" name=\"searchedTrack\" value={this.state.searchedTrack} type=\"text\" placeholder=\"Search song...\"/>\r\n                            </div>\r\n                            <button className=\"btn btn-success mb-2\" type=\"submit\">Search</button>\r\n                        </form>\r\n                        <Table striped border className=\"nextup\">\r\n                            <thead >\r\n                                <th>Song</th>\r\n                                <th>Artist</th>\r\n                                <th>Album</th>\r\n                                <th>Select</th>\r\n                            </thead>\r\n                            { this.state.foundTracks.length > 0 ?\r\n                                <tbody>\r\n                                {this.state.foundTracks.map((element, index) => {\r\n                                    return(\r\n                                        <tr>\r\n                                            <td>{element[0]}</td>\r\n                                            <td>{element[1]}</td>\r\n                                            <td>{element[2]}</td>\r\n                                            <td>\r\n                                                <button onClick={this.addSongtoMongo.bind(this)} value={element[3]} className=\"btn btn-success\">Add</button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                                }   \r\n                                </tbody>\r\n                                :\r\n                                <tbody>\r\n\r\n                                </tbody>\r\n                            }\r\n                            \r\n                        </Table>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                    </div>\r\n                    }\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Nextup;","import React from 'react';\r\nimport MyGroups from './mygroups/mygroups.js';\r\nimport Chat from './chat/chat.js'\r\nimport Nextup from './nextup/nextup.js';\r\nimport './dashboard.css'\r\n\r\nclass Dashboard extends React.Component{\r\n    \r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            user: '',\r\n            deviceID: null,\r\n            userID: null,\r\n            loggedIn: false,\r\n            item: null,\r\n            refreshToggled: false,\r\n            getGroupPlayback: false,\r\n            playbackCommandtrigger: false,\r\n            playListCommandtrigger: false,\r\n            changePlaybackTriggerNext: false,\r\n            changePlaybackTriggerPrevious: false,\r\n            changePlayback: null,\r\n            playback: null,\r\n            playlistDisplay: null,\r\n            playlistToMyGroups: null,\r\n            iteratorPlaylist:0,\r\n            group: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    componentDidUpdate(){\r\n\r\n        if(this.state.userID !== null && this.props.user !== this.state.user && this.props.user !== '' && this.props.deviceID !== this.state.deviceID && this.props.deviceID !== null) // when user changes\r\n        {\r\n            this.setState({user: this.props.user, loggedIn: true, deviceID: this.props.deviceID});\r\n            this.getMusicInfo();\r\n        }\r\n\r\n        if(this.props.userid !== null && this.props.userid !== this.state.userID)\r\n        {\r\n            this.setState({userID: this.props.userid});\r\n        }\r\n\r\n        if(this.state.refreshToggled)\r\n        {\r\n            console.log('Refreshed');\r\n            this.getMusicInfo();\r\n        }\r\n\r\n        if(this.state.playbackCommandtrigger)\r\n        {\r\n            console.log('Triggered Play/pause');\r\n            if(this.state.playback === true)\r\n            {\r\n                console.log('play');\r\n                this.playpausePlayback(\"play\");\r\n            }\r\n            else\r\n            {\r\n                console.log('pause');\r\n                this.playpausePlayback(\"pause\");\r\n            } \r\n        }\r\n\r\n        if(this.state.changePlaybackTriggerNext)\r\n        {\r\n            var i = this.state.iteratorPlaylist;\r\n            console.log(\"size:\", this.state.playlistDisplay.tracklist.length);\r\n            console.log(\"iterator: \", i);\r\n            console.log('next song: ',this.state.playlistDisplay.tracklist[i]);\r\n            \r\n            this.playSong(this.state.playlistDisplay.tracklist[i]);\r\n        }\r\n        if(this.state.changePlaybackTriggerPrevious)\r\n        {   \r\n            if(this.state.iteratorPlaylist > 0)\r\n            {\r\n                var i = this.state.iteratorPlaylist -1;\r\n            }\r\n            else\r\n            {\r\n                var i = 0;\r\n            }\r\n            console.log('previous song: ',this.state.playlistDisplay.tracklist[i]);\r\n            \r\n            this.playSong(this.state.playlistDisplay.tracklist[i]);\r\n        }\r\n    }\r\n\r\n    getGroupPlaying = (group) => {\r\n        console.log(\"Fetching nowplaying info...\");\r\n        fetch(\"/getgroupplaying\", {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({userid: this.state.userID, requestedGroup: group}),\r\n          })\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"Group playing data is:\" , res);\r\n            if(res !== null && res!== undefined)\r\n            {\r\n                console.log(\"Fetched nowplaying:\", res.playnow);\r\n                if(res.isplaying)\r\n                {\r\n                    this.playSong(res.playnow);\r\n                }\r\n                else{\r\n                    console.log(\"Received playnow but not playing\");\r\n                    this.playNowSong(res.playnow);\r\n                    setTimeout( () => {\r\n                        this.playpausePlayback(\"pause\");\r\n                    }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n                    \r\n                }\r\n            }\r\n        })\r\n        );\r\n    }\r\n\r\n    getMusicInfo = () => {\r\n        console.log(\"Fetching playback info...\");\r\n        fetch(\"/getplayback\", {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({userid: this.state.userID}),\r\n          })\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"res is:\" , res);\r\n            if(res !== null && res!== undefined)\r\n            {\r\n                console.log(\"Fetched!\");\r\n                this.setState({\r\n                    item: res.item,\r\n                    refreshToggled: false,\r\n                    playback: res.is_playing,\r\n                });\r\n            }\r\n        })\r\n        );\r\n    }\r\n    \r\n    playpausePlayback = (action) => {\r\n        console.log(\"Playing/pausing playback...\");\r\n        fetch(\"/\"+action, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({userid: this.state.userID}),\r\n          })\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Done!: \", res);\r\n                this.setState({\r\n                    playbackCommandtrigger: false,\r\n                });\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    playNowSong = (songuri) => {\r\n        fetch(\"/playsong\", \r\n        {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({uri: `${songuri}`, deviceID: `${this.state.deviceID}`, userid: this.state.userID}),\r\n        }).then(res => res.json()\r\n        .then(res => {\r\n            console.log(res);\r\n            \r\n            console.log(\"Waiting for spotify to change song...\");\r\n            setTimeout( () => {\r\n            this.setState({\r\n                refreshToggled: true,\r\n                changePlaybackTriggerNext: false,\r\n                iteratorPlaylist: this.state.iteratorPlaylist + 1,\r\n            });\r\n            }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song   \r\n        }));\r\n    }\r\n\r\n    setPlayNowSong = (songuri) => {\r\n        fetch(\"/setgroupplaying\", \r\n        {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({uri: `${songuri}`, requestedGroup: `${this.state.group}`}),\r\n        }).then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"response to set now playing\", res);\r\n            console.log(\"Added nowplaying song to group\");\r\n           \r\n        }));\r\n    }\r\n\r\n    playSong = (songuri) => {\r\n        fetch(\"/playsong\", \r\n        {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({uri: `${songuri}`, deviceID: `${this.state.deviceID}`, userid: this.state.userID}),\r\n        }).then(res => res.json()\r\n        .then(res => {\r\n            console.log(res);\r\n            if((this.state.iteratorPlaylist) < this.state.playlistDisplay.tracklist.length)\r\n            {\r\n                console.log(\"Waiting for spotify to change song...\");\r\n                setTimeout( () => {\r\n                    if(this.state.changePlaybackTriggerNext)\r\n                    {\r\n                        this.setState({\r\n                            refreshToggled: true,\r\n                            changePlaybackTriggerNext: false,\r\n                            iteratorPlaylist: this.state.iteratorPlaylist + 1,\r\n                        });\r\n                        this.setPlayNowSong(songuri);\r\n                    }\r\n                    else if(this.state.changePlaybackTriggerPrevious){\r\n                        this.setState({\r\n                            refreshToggled: true,\r\n                            changePlaybackTriggerPrevious: false,\r\n                            iteratorPlaylist: this.state.iteratorPlaylist + 1,\r\n                        });\r\n                    }\r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n            }\r\n            else{\r\n                setTimeout( () => {\r\n                    this.setState({refreshToggled: true, changePlaybackTriggerNext: false, iteratorPlaylist: 0});\r\n                    console.log(\"Reset iterator: \", this.state.iteratorPlaylist);\r\n                \r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n            }\r\n           \r\n        }));\r\n        \r\n    } \r\n\r\n    changePlaybackNext = () => {\r\n        console.log(\"Changing playback...\");\r\n        fetch(\"/next\")\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Fetched!: \", res);\r\n                this.setState({\r\n                    changePlaybackTriggerNext: false,\r\n                });\r\n                console.log(\"Waiting for spotify to change song...\");\r\n                setTimeout( () => {\r\n                    this.setState({refreshToggled: true});\r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n                    \r\n            }\r\n            else{\r\n                alert(\"Error from spotify\");\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    changePlaybackPrevious = (action) => {\r\n        console.log(\"Changing playback...\");\r\n        fetch(\"/previous\")\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Fetched!: \", res);\r\n                this.setState({\r\n                    changePlaybackTriggerPrevious: false,\r\n                });\r\n                console.log(\"Waiting for spotify to change song...\");\r\n                setTimeout( () => {\r\n                    this.setState({refreshToggled: true});\r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n                    \r\n            }\r\n            else{\r\n                alert(\"Error from spotify\");\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    getSelectedPlaylist = (playlist, group) => {\r\n        console.log(\"Got selected playlist in dashboard: \", `${playlist.tracklist} from group: ${group}`);\r\n        this.setState({playlistDisplay: playlist, iteratorPlaylist: 0});\r\n    }\r\n\r\n    getSelectedGroup = (group) => {\r\n        console.log(\"Got selected group in dashboard: \", group);\r\n        this.setState({group: group});\r\n        this.getGroupPlaying(group);\r\n    }\r\n\r\n    addedSongtoPlaylist = (newplaylist, group) => {\r\n        console.log(\"Got updated playlist in dashboard: \", `${newplaylist} from group: ${group}`);\r\n        this.setState({playlistDisplay: newplaylist, playlistToMyGroups: newplaylist, group: group});\r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            <div id=\"mainrow\" className=\"row\">    \r\n                <div id=\"mygroups\" className=\"col-2 \">\r\n                    <div className=\"row justify-content-center groupR\">\r\n                        <h2 className=\"titleGroup\">My groups</h2>\r\n                        <MyGroups userid={this.state.userID} user={this.state.user} getplaylist={this.getSelectedPlaylist} getGroup={this.getSelectedGroup} selectedGroup={this.state.group} playlistToMyGroups={this.state.playlistToMyGroups}/>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"col-7\">\r\n                    <div className=\"row nowplaying \">\r\n                        <div className=\"col-6\">\r\n                            { (this.state.item === null || this.state.item === undefined ) ?\r\n                                <div>    \r\n                                <h2 className=\"nowP\">Now Playing: [Nothing is playing]</h2>\r\n                                { this.state.user !== '' ?\r\n                                    <button className=\"btn btn-warning\" onClick={() => this.setState({refreshToggled: true})}>Refresh</button>\r\n                                :\r\n                                    <div></div>\r\n                                }\r\n                                { this.state.playlistDisplay !== null ?\r\n                                    <button className=\"btn btn-primary\" onClick={() => this.setState({changePlaybackTriggerNext: true})}>Play Next</button>\r\n                                :\r\n                                    <div>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                            : \r\n                                <div>\r\n                                    <h2 className=\"nowP\">Now Playing:</h2>\r\n                                    <h5 className=\"songName\">{this.state.item.name}</h5>\r\n                                    <h6 className=\"artistName\">Artist: {this.state.item.artists[0].name}</h6>\r\n                                    <h6 className=\"albumName\">Album: {this.state.item.album.name}</h6>\r\n                                    \r\n                                    <button className=\"btn btn-warning res\" onClick={() => this.setState({refreshToggled: true})}>Refresh</button>\r\n                                    { this.state.playback ?\r\n                                        <button className=\"btn btn-danger res\" onClick={() => this.setState({playbackCommandtrigger: true, playback: false})}>Pause</button>\r\n                                    :\r\n                                        <button className=\"btn btn-success res\" onClick={() => this.setState({playbackCommandtrigger: true, playback: true})}>Play</button>\r\n                                    }\r\n                                    { this.state.playlistDisplay !== null && this.state.iteratorPlaylist < this.state.playlistDisplay.tracklist.length ?\r\n                                        <button className=\"btn btn-primary res\" onClick={() => this.setState({changePlaybackTriggerNext: true})}>Next</button>\r\n                                    :\r\n                                        <button className=\"btn btn-primary res\" disabled>Next</button>\r\n                                    }\r\n                                    \r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            { (this.state.item === null || this.state.item === undefined) ?\r\n                                <h2></h2>\r\n                            :\r\n                                <div>\r\n                                    <img src={`${this.state.item.album.images[1].url}`} alt=\"Cover\"></img> \r\n                                    \r\n                                </div>\r\n                            }\r\n                            \r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <div>\r\n                        <Nextup userid={this.state.userID} playlist={this.state.playlistDisplay} getUpdatedPlaylist={this.addedSongtoPlaylist} group={this.state.group} nextup={this.state.iteratorPlaylist}/>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div id=\"chat\" className=\"col-3\">\r\n                <Chat group={this.state.group} author={this.state.user}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport TopHeader from './topheader/topheader';\r\nimport Dashboard from './dashboard/dashboard';\r\nimport './App.css';\r\nimport Vynil from './img/vynil.svg';\r\nimport Record from './img/record.svg';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      loggedin: false,\r\n      sessionExists: false,\r\n      userState: '',\r\n      deviceID: null,\r\n      devicename: null,\r\n      deviceactive: false,\r\n      userID: null,\r\n      LandinguserID: null,\r\n      getUserToggled: false\r\n    };\r\n  };\r\n\r\n  componentDidMount(){\r\n\r\n\r\n    if(!this.state.sessionExists)\r\n    {\r\n      var userIDsession = sessionStorage.getItem('useridsession');\r\n      console.log(\"SESSION ID:\", userIDsession);\r\n    }\r\n\r\n    if(this.state.userID === null && sessionStorage.getItem('useridsession') === null)\r\n        {\r\n            console.log(\"Requesting client id...\");\r\n            fetch(\"/authorize\")\r\n            .then(res => res.json()\r\n            .then(res => {\r\n                this.setState({userID: res.userid});\r\n                console.log(\"Landing on page with id:\", this.state.userID);\r\n                this.getID(res.userid);\r\n            }));\r\n    }\r\n    \r\n    if(this.state.loggedin !== true)\r\n    {\r\n      console.log(\"fetching getUser on mount...\");\r\n      fetch(\"/getUser\", \r\n      {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({userid: this.state.userID}),\r\n      })\r\n      .then(res => res.json()\r\n      .then(res => {\r\n        if(res.statusCode === 200)\r\n        {\r\n          if(res.displayname !== this.state.userState)\r\n          {\r\n            console.log(\"Fetched!\", res.displayname);\r\n            this.setState({userState: res.displayname, loggedin: true});\r\n          }\r\n        }\r\n        else{\r\n          console.log(\"Error code: \", res.statusCode);\r\n          if(res.statusCode === \"tryagain\")\r\n          {\r\n            this.setState({getUserToggled: true});\r\n          }\r\n        }\r\n        \r\n      }))\r\n      .catch(err =>{\r\n        console.log(\"Error with GetUser\");\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(){\r\n\r\n    if(!this.state.sessionExists)\r\n    {\r\n      var userIDsession = sessionStorage.getItem('useridsession');\r\n      if(userIDsession === null)\r\n      {\r\n        console.log(\"No session user ID saved.\");\r\n      }\r\n      else{\r\n        console.log(\"Session id saved:\", userIDsession);\r\n        this.setState({userID: userIDsession, loggedin: true, getUserToggled: false, sessionExists: true});\r\n      }\r\n    }\r\n\r\n    if(this.state.getUserToggled)\r\n    {\r\n      setTimeout( () => {\r\n        \r\n      \r\n      console.log(\"fetching getUser...\");\r\n      fetch(\"/getUser\", \r\n      {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({userid: this.state.userID}),\r\n      })\r\n      .then(res => res.json()\r\n      .then(res => {\r\n        if(res.statusCode === 200)\r\n        {\r\n          if(res.displayname !== this.state.userState)\r\n          {\r\n            console.log(\"Fetched!:\", res.displayname);\r\n            var userIDsession = sessionStorage.getItem('useridsession');\r\n            \r\n            sessionStorage.setItem('useridsession', this.state.userID);\r\n            \r\n            console.log(\"SESSION ID:\", sessionStorage.getItem('useridsession'));\r\n            this.setState({userState: res.displayname, loggedin: true, getUserToggled: false, sessionExists: true});\r\n          }\r\n        }\r\n        else{\r\n          console.log(\"Error code: \", res.statusCode);\r\n          if(res.statusCode === \"tryagain\")\r\n          {\r\n            this.setState({getUserToggled: true});\r\n          }\r\n        }\r\n        \r\n      }))\r\n      .catch(err =>{\r\n        console.log(\"Error with GetUser\");\r\n      });\r\n\r\n      }, 500);\r\n    }\r\n\r\n    if(this.state.deviceID === null && this.state.loggedin ===  true)\r\n    {\r\n      console.log(\"user id:\", this.state.userID);\r\n      console.log(\"Device id:\", this.state.deviceid);\r\n      console.log(\"Logged in:\", this.state.loggedin);\r\n      fetch(\"/mydevices\", {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({userid: this.state.userID}),\r\n      })\r\n      .then(res => res.json()\r\n      .then(res => {\r\n        if(res.length === 0)\r\n        {\r\n          alert(\"No listening is activated. Open your web browser at open.spotify.com, active your device (play/pause) and reload page.\");\r\n        }\r\n        else{\r\n          console.log(\"Device found: \", res[0]);\r\n          if(res[0].deviceid !== this.state.deviceID)\r\n          {\r\n            this.setState({deviceID: res[0].deviceid, devicename: res[0].devicename, deviceactive: res[0].deviceactive});\r\n          }\r\n        }\r\n        \r\n      }));\r\n    }\r\n  }\r\n\r\n  getDeviceID = () => {\r\n    console.log(\"Get DeviceID requested\");\r\n    fetch(\"/mydevices\", {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({userid: this.state.userID}),\r\n    })\r\n    .then(res => res.json()\r\n    .then(res => {\r\n      if(res.length === 0)\r\n      {\r\n        alert(\"No active computer devices\");\r\n      }\r\n      else{\r\n        console.log(\"Devices found: \", res);\r\n        \r\n      }\r\n      \r\n    }));\r\n  }\r\n\r\n  getID = (id) =>{\r\n    this.setState({userID: id});\r\n    console.log(\"App got client id:\", this.state.userID);\r\n  }\r\n\r\n  openSpotify = () => {\r\n    const url = 'https://open.spotify.com';\r\n    window.open(url, '_blank');\r\n}\r\n\r\n\r\n  render()\r\n  {  \r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.loggedin\r\n                  ? <div><TopHeader user={this.state.userState} getID={this.getID} devicename={this.state.devicename} deviceactive={this.state.deviceactive} getDevicesID={this.getDeviceID}/>\r\n                      <div className=\"container-fluid\">  \r\n                        <Dashboard user={this.state.userState} deviceID={this.state.deviceID} userid={this.state.userID}/>\r\n                      </div>\r\n                      </div>\r\n                  : <div className=\"Plus\">\r\n                    <header className=\"App-header\">\r\n                      <button className=\"Home\">\r\n                      </button>\r\n                      <div className=\"\">\r\n                        <a className=\"Login\" onClick={this.openSpotify} href={`/login/${this.state.userID}`}>\r\n                          Log In\r\n                        </a>\r\n                        <a href=\"https://www.spotify.com/us/\" className=\"Register\">\r\n                          Register Now!\r\n                        </a>\r\n                      </div>\r\n                    </header>\r\n                    <div className=\"MiddleTitle\">\r\n                      <h2 className=\"Black\">Be the life of the party!</h2>\r\n                      <h1 className=\"Title\">SHARING MUSIC</h1>\r\n                      <h1 className=\"Title\">NEVER FELT SO <span className=\"Outline\">GOOD</span></h1>\r\n                      <img alt=\"Vynil\" src={Vynil} className=\"Vynil\"/>\r\n                      <img alt=\"Record\" src={Record} className=\"Record\"/>\r\n                      <a  href={`/login/${this.state.userID}`}  className=\"Button\">\r\n                        <svg><g><line x2=\"227.62\" y1=\"31.28\" y2=\"31.28\"></line><polyline points=\"222.62 25.78 228.12 31.28 222.62 36.78\"></polyline><circle cx=\"224.67\" cy=\"30.94\" r=\"30.5\" transform=\"rotate(180 224.67 30.94) scale(1, -1) translate(0, -61)\"></circle></g>\r\n                        </svg><font>Enter the Sound</font>\r\n                      </a>\r\n                    </div>\r\n                    <footer className=\"Foot\">\r\n                      <p className=\"Copyright\">&#xA9; Antoine & Juan</p>\r\n                      <button className=\"About\">\r\n                      ABOUT\r\n                      </button>\r\n                    </footer>\r\n                 </div>\r\n        }\r\n          \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}